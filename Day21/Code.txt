// writer process

vi writer.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024  // Size of shared memory segment

int main()
{
	key_t key = ftok("shmfile",123);  // Generate unique key
	int shmid = shmget(key,SHM_SIZE,IPC_CREAT | 0666);  // Create shared memory segment
	if(shmid == -1)
	{
		perror("shmget");
		exit(1);
	}
	
	char *shmaddr = (char*) shmat(shmid,NULL,0);  // Attach to shared memory
	if(shmaddr == (char*)-1)
	{
		perror("shmat");
		exit(1);
	}
	
	printf("Write data: ");
	fgets(shmaddr,SHM_SIZE,stdin);  // Write data
	
	printf("Data written in memory: %s\n",shmaddr);
	
	shmdt(shmaddr);  // Detach from shared memory
	
	return 0;
}

chmod 644 writer.c
gcc writer.c -o writer
./writer

........................................................................................................................................................

// Reciever process

vi reader.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024  // Size of shared memory segment

int main()
{
	key_t key = ftok("shmfile",123);  // Generate unique key
	int shmid = shmget(key,SHM_SIZE , 0666);  // Create shared memory segment
	if(shmid == -1)
	{
		perror("shmget");
		exit(1);
	}
	
	char *shmaddr = (char*) shmat(shmid,NULL,0);  // Attach to shared memory
	if(shmaddr == (char*)-1)
	{
		perror("shmat");
		exit(1);
	}
	
	
	printf("Data read from memory: %s\n",shmaddr);
	
	shmdt(shmaddr);  // Detach from shared memory
	
	shmctl(shmid, IPC_RMID, NULL);  // Removed shared memory segment
	
	return 0;
}

chmod 644 reader.c
gcc reader.c -o reader
./reader

........................................................................................................................................................

/*
child --> writehello
parent --> read the message from child
*/

vi question.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/wait.h>

int main()
{
	size_t size = 4096;
	char *shared_mem = mmap(NULL,size,PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS , -1,0); 
	if(shared_mem == MAP_FAILED)
	{
		perror("mmap failed");
		exit(1);
	}
	
	pid_t pid = fork();
	if(pid == 0)
	{
		// child process
		sprintf(shared_mem, "Hello from child!");
		printf("Child wrote: %s\n",shared_mem);
	}
	else if(pid>0)
	{
		//parent process
		wait(NULL); // wait for child to finish
		printf("Parent read %s\n",shared_mem);
		munmap(shared_mem,size);
	}
	else
	{
		perror("shmat");
		exit(1);
	}
	
	return 0;
}

gcc question.c -o question
./question

