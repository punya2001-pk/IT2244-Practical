.................................................................................
 
01.

vi sleep.c

#include <stdio.h>
#include <stdlib.h> // for sleep()
#include <unistd.h> // for exit()


int main()
{
	printf("Program started.\n");
	
	printf("Sleeping for 3 seconds...\n");
	sleep(3); // pause for 3 seconds
	
	printf("Exiting the program.\n");
	exit(0); // clean exit
	
	return 0;
}

gcc sleep.c -o sleep

./sleep


................................................................................

02.

vi wait.c

#include <stdio.h>
#include <stdlib.h> // for exit()
#include <unistd.h> // for sleep() , for fork()
#include <sys/wait.h> // for wait


int main()
{
	pid_t pid;
	
	printf("Parent process started. PID: %d\n",getpid());
	
	pid = fork(); // create new child process
	
	if(pid<0)
	{
		perror("fork failed");
		exit(1);
	}
	
	if(pid == 0)
	{
		// child process
		printf("Child process. PID: %d, sleeping for 2 seconds...\n",getpid());
		sleep(2);
		
		printf("Child process exiting.\n");
		exit(0); //child exits with status 0
	}
	else
	{
		// parent process
		int status;
		printf("Parent waiting for child to finish...\n");
		wait(&status); // wait for child to finish
		if(WIFEXITED(status))
		{
			printf("Child exited with status: %d\n",WEXITSTATUS(status));
			// WEXITSTATUS(status) gets the actual exit code (0 here)
		}
		else
		{
			printf("Child did not exit normally.\n");
		}
		printf("Parent process ending.\n");
	}
		
	return 0;
}

gcc wait.c -o wait

./wait


................................................................................

03. First child: Slept for 1 second.
	Second child: Slept for 3 second.
	Parent: Both children have finished.

vi exc.c

#include <stdio.h>
#include <stdlib.h> 
#include <unistd.h> 
#include <sys/wait.h> 

int main() {
    pid_t pid1, pid2;

    printf("Parent process started. PID: %d\n", getpid());

    pid1 = fork();
    if (pid1 < 0) {
        perror("fork failed");
        exit(1);
    } else if (pid1 == 0) {
        printf("First child process. PID: %d, sleeping for 1 second...\n", getpid());
        sleep(1);
        printf("First child process exiting.\n");
        exit(0);
    }

    pid2 = fork();
    if (pid2 < 0) {
        perror("fork failed");
        exit(1);
    } else if (pid2 == 0) {
        printf("Second child process. PID: %d, sleeping for 3 seconds...\n", getpid());
        sleep(3);
        printf("Second child process exiting.\n");
        exit(0);
    }

   
    printf("Parent waiting for both children to finish...\n");
    wait(NULL);
    wait(NULL); 

    printf("Both children have finished.\n");
    printf("Parent process ending.\n");

    return 0;
}
gcc exc.c -o exc

./exc

................................................................................

04. First child: Slept for 2 seconds, exits with status 2
	Second child: Slept for 1 second, exits with status 1
	Parent: wait twice, and prints which child(by PID or exit code)finished first and second

vi exc2.c

#include <stdio.h>
#include <stdlib.h>  
#include <unistd.h> 
#include <sys/wait.h> 

int main() 
{
    pid_t pid1, pid2;
    int status1, status2;

    printf("Parent process started. PID: %d\n", getpid());

    
    pid1 = fork();
    if (pid1 < 0) 
	{
        perror("Fork failed");
        exit(1);
    } 
	else if (pid1 == 0) 
	{
        printf("First child process. PID: %d, sleeping for 2 seconds...\n", getpid());
        sleep(2);
        printf("First child process exiting with status 2.\n");
        exit(2);
    }

    
    pid2 = fork();
    if (pid2 < 0) 
	{
        perror("Fork failed");
        exit(1);
    } 
	else if (pid2 == 0) 
	{
        printf("Second child process. PID: %d, sleeping for 1 second...\n", getpid());
        sleep(1);
        printf("Second child process exiting with status 1.\n");
        exit(1);
    }

 
    pid_t finished_pid = wait(&status1);
    printf("Child process with PID %d finished first with exit status: %d\n", finished_pid, WEXITSTATUS(status1));

    finished_pid = wait(&status2);
    printf("Child process with PID %d finished second with exit status: %d\n", finished_pid, WEXITSTATUS(status2));

    printf("Parent process ending.\n");

    return 0;
}


gcc exc2.c -o exc2

./exc2


................................................................................

05. The parent creates a child process.
	The child creates a grandchild process.
	The grandchild sleeps 2 seconds and exits with status 2.
	The child waits for the grandchild, prints its exit status, then exits with status 55.

vi exc3.c

#include <stdio.h>
#include <stdlib.h> 
#include <unistd.h> 
#include <sys/wait.h> 

int main() 
{
    pid_t child_pid, grandchild_pid;
    int status;

    printf("Parent process started. PID: %d\n", getpid());

    
    child_pid = fork();
    if (child_pid < 0) 
	{
        perror("Fork failed");
        exit(1);
    } 
	else if (child_pid == 0) 
	{
        
        printf("Child process started. PID: %d\n", getpid());

        
        grandchild_pid = fork();
        if (grandchild_pid < 0) 
		{
            perror("Fork failed");
            exit(1);
        } 
		else if (grandchild_pid == 0) 
		{
            
            printf("Grandchild process started. PID: %d, sleeping for 2 seconds...\n", getpid());
            sleep(2);
            printf("Grandchild exiting with status 2.\n");
            exit(2);
        }

       
        wait(&status);
        printf("Child process: Grandchild exited with status: %d\n", WEXITSTATUS(status));

        
        printf("Child process exiting with status 55.\n");
        exit(55);
    }

   
    wait(&status);
    printf("Parent process: Child exited with status: %d\n", WEXITSTATUS(status));
    printf("Parent process ending.\n");

    return 0;
}


gcc exc3.c -o exc3

./exc3