vi que.c

#include <stdio.h>
#include <unistd.h>

int main() 
{
    int A;
	int	B;
	int C;
	
    printf("\nEnter three numbers: ");
    scanf("%d %d %d", &A, &B, &C);

    int f = fork();
	
    if (f == 0) 
	{ 
		
        int fact = 1;
        for (int i = 1; i <= A; i++)
		{
            fact = fact * i;
        }
		
        printf("Factorial : %d\n", fact);
		
    } 
	else 
	{
        int f1 = fork();
		
        if (f1 == 0) 
		{ 
			
            int a = 0;
			int b = 1;
			int c;
			
            printf("Fibonacci : %d\n", B);
			
            for (int i = 1; i <= B; i++) {
                c = a + b;
                a = b;
                b = c;
                printf("%d ", c);
            }
			
            printf("\n");
			
        }
		else 
		{ 
            printf("Prime :%d\n", C);
			
            for (int i = 2; i <= C; i++) 
			{
				
                for (int j = 2; j * j <= C; j++) 
				{
					if (i % j == 0)
					{
						printf("%d\n",i);
					}
				}
            }
            printf("\n");
        }
    }
    return 0;
}

gcc que.c -o que
./que




vi que2.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>


void factorial(int num) {
    long long fact = 1;
    for (int i = 1; i <= num; i++)
        fact *= i;
    printf("Factorial of %d: %lld\n", num, fact);
}


void fibonacci(int num) {
    int a = 0, b = 1, next;
    printf("Fibonacci series up to %d: ", num);
    for (int i = 0; i < num; i++) {
        printf("%d ", a);
        next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}


void prime_numbers(int num) {
    printf("Prime numbers up to %d: ", num);
    for (int i = 2; i <= num; i++) {
        int is_prime = 1;
        for (int j = 2; j * j <= i; j++) {
            if (i % j == 0) {
                is_prime = 0;
                break;
            }
        }
        if (is_prime)
            printf("%d ", i);
    }
    printf("\n");
}

int main() {
    int num1, num2, num3;
    printf("Enter three numbers: ");
    scanf("%d %d %d", &num1, &num2, &num3);

    pid_t sibling_pid = fork();

    if (sibling_pid > 0) {
        
        factorial(num1);
        factorial(num2);
        factorial(num3);
        wait(NULL);
    } else if (sibling_pid == 0) {
        
        pid_t child1_pid = fork();
        if (child1_pid == 0) {
           
            fibonacci(num1);
            fibonacci(num2);
            fibonacci(num3);
        } else {
            pid_t child2_pid = fork();
            if (child2_pid == 0) {
                
                prime_numbers(num1);
                prime_numbers(num2);
                prime_numbers(num3);
            }
            wait(NULL);
        }
        wait(NULL);
    }
    return 0;
}



gcc que2.c -o que2
./que2


vi que3.c

#include <stdio.h>
#include <unistd.h>

int is_prime(int C)
{
    if (C < 2) return 0;
	
    for (int i = 2; i * i <= C; i++) 
	{
        if (C % i == 0)
            return 0;
    }
    return 1;
}

int main() 
{
    int A, B, C;
	
    printf("\nEnter three numbers: ");
    scanf("%d %d %d", &A, &B, &C);

    int f = fork();
	
    if (f == 0) 
	{ 
        int fact = 1;
        for (int i = 1; i <= A; i++) 
		{
            fact *= i;
        }
		
        printf("Factorial of %d: %d\n", A, fact);
		
    } 
	else 
	{
        int f1 = fork();
		
        if (f1 == 0) 
		{ 
            int a = 0, b = 1, c;
			
            printf("Fibonacci series up to %d:\n", B);
			
            for (int i = 1; i <= B; i++) 
			{
                c = a + b;
                a = b;
                b = c;
                printf("%d ", c);
            }
			
            printf("\n");
			
        } 
		else 
		{ 
            printf("Prime numbers up to %d:\n",C);
			
            for (int i = 2; i <= C; i++) 
			{
                if (is_prime(i)) 
				{
                    printf("%d ", i);
                }
            }
			
            printf("\n");
        }
    }
    return 0;
}


gcc que3.c -o que3
./que3


vi que4.c


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int n;
    printf("Enter number: ");
    scanf("%d", &n);  // Use &n to store the value at the address of n

    int child1 = fork();  // First fork

    if (child1 == 0) {
        // Child1 process
        printf("Child1 -> PID: %d \t PPID: %d\n", getpid(), getppid());

        // Factorial calculation
        int fact = 1;
        for (int i = 1; i <= n; i++) {
            fact *= i;
        }
        printf("Factorial of %d is %d\n", n, fact);

        // Child of child1 - for Fibonacci
        int child5 = fork();
        if (child5 == 0) {
            printf("Child5 -> PID: %d \t PPID: %d\n", getpid(), getppid());

            int a = 0, b = 1, fib = 0;
            for (int j = 1; j < n; j++) {
                fib = a + b;
                a = b;
                b = fib;
            }
            printf("Fibonacci term at position %d is %d\n", n, (n == 0) ? 0 : (n == 1) ? 1 : fib);
        } else {
            wait(NULL);  // Wait for child5
        }

    } else {
        // Parent process

        int child2 = fork();  // Second fork
        if (child2 == 0) {
            printf("Child2 -> PID: %d \t PPID: %d\n", getpid(), getppid());

            int s = 1;
            for (int k = 0; k < n; k++) {
                s *= 2;
            }
            printf("2 to the power of %d is %d\n", n, s);

        } else {
            int child3 = fork();  // Third fork
            if (child3 == 0) {
                printf("Child3 -> PID: %d \t PPID: %d\n", getpid(), getppid());
                int square = n * n;
                printf("Square of %d is %d\n", n, square);
            } else {
                // Parent waits for all its children
                wait(NULL);
                wait(NULL);
            }
        }
    }

    return 0;
}

gcc que4.c -o que4
./que4