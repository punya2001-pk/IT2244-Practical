// Sender and reciever both of you , You send the message and recieved it.

// sender

vi shared1.c

#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#define MAX 10

//Structure for message queue
struct mesg_buffer{
	long mesg_type;
	char mesg_text[100];
}
message;
int main()
{
	key_t key;
	int msgid;
	
	//ftok to generate unique key
	key = ftok("progfile",123);
	
	// msgget creates a message queue
	// and returns idetifier
	msgid = msgget(key, 0666 | IPC_CREAT);
	message.mesg_type = 1;
	printf("Write Data: ");
	fgets(message.mesg_text,MAX,stdin);
	
	// msgsnd to send message
	msgsnd(msgid, &message, sizeof(message), 0);
	
	// display the message
	printf("Data send is : %s \n", message.mesg_text);
	
	return 0;
}

gcc shared1.c -o shared1
./shared1

.............................................................................................................................................

// receiver

vi shared2.c

#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>

// structure for message queue
struct mesg_buffer{
	long mesg_type;
	char mesg_text[100];
}
message;
int main()
{
	key_t key;
	int msgid;
	
	//ftok to generate unique key
	key = ftok("progfile",123);
	
	// msgget creates a message queue
	// and returns idetifier
	msgid = msgget(key, 0666 | IPC_CREAT);
	
	//msgrcv to recieve message
	msgrcv(msgid, &message, sizeof(message), 1, 0);
	
	// display the message
	printf("Data Recieved is : %s \n", message.mesg_text);
	
	// to destroy the message queue
	msgctl(msgid, IPC_RMID, NULL);
	
	return 0;
}

gcc shared2.c -o shared2
./shared2

.............................................................................................................................................

Exercise

// IPC using message queue

/*
read inputs from the parent process
Enter Name : hi
Enter RegNO : 2314
Enter Age : 24

Message send successfully.

give the output from the child process

Recieved Name : hi
Recieved RegNO : 2314
Recieved Age : 24
*/

vi Exercise1.c

#include <sys/msg.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

#define MSGKEY 1111
#define MAX_NAME_LEN 100
#define MAX_REGNO_LEN 100

struct person {
    long mtype; // Message type
    int age;
    char name[MAX_NAME_LEN];
    char regno[MAX_REGNO_LEN];
};

int main() {
    int msqid;
    struct person p1, p2;
    int f = fork();

    if (f == 0) {
        // Child process: Receiver
        msqid = msgget(MSGKEY, IPC_CREAT | 0666); 
        if (msqid == -1) {
            perror("msgget failed");
            exit(EXIT_FAILURE);
        }

        int msg_size = sizeof(struct person) - sizeof(long);

        if (msgrcv(msqid, &p2, msg_size, 0, 0) == -1) {
            perror("msgrcv failed");
            exit(EXIT_FAILURE);
        } else {
            printf("Received Name: %s\n", p2.name);
            printf("Received RegNo: %s\n", p2.regno);
            printf("Received Age: %d\n", p2.age);
        }

        if (msgctl(msqid, IPC_RMID, NULL) == -1) {
            perror("msgctl failed");
            exit(EXIT_FAILURE);
        }
    } else {
        // Parent process: Sender
        msqid = msgget(MSGKEY, IPC_CREAT | 0666);
        if (msqid == -1) {
            perror("msgget failed");
            exit(EXIT_FAILURE);
        }

        p1.mtype = 1;

        printf("Enter Name: ");
        scanf("%s", p1.name);

        printf("Enter RegNo: ");
        scanf("%s", p1.regno);

        printf("Enter Age: ");
        scanf("%d", &p1.age);

        int msg_size = sizeof(struct person) - sizeof(long);

        if (msgsnd(msqid, &p1, msg_size, IPC_NOWAIT) == -1) {
            perror("msgsnd failed");
        } else {
            printf("Message sent successfully.\n");
        }

        exit(0);
    }

    return 0;
}




gcc Exercise1.c -o Exercise1
./Exercise1